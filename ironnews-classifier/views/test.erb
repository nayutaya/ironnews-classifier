
<%# テスト用のerbファイル %>

<%

class BayesOneClassifier
  def initialize
  end

  # あるカテゴリの中に、ある特徴が現れた数
  def fcount(feature, category)
    features = BayesOneFeature.all(
      :category => category,
      :feature  => feature)
    return features.inject(0) { |sum, feature|
      sum + feature.quantity
    }
  end

  # あるカテゴリの中のドキュメント数
  def catcount(category)
    categories = BayesOneCategory.all(:name => category)
    return categories.inject(0) { |sum, category|
      sum + category.quantity
    }
  end

  # ドキュメントの総数
  def totalcount
    categories = BayesOneCategory.all
    return categories.inject(0) { |sum, category|
      sum + category.quantity
    }
  end

  # カテゴリの一覧
  def categories
    #return @quantities.keys
    categories = BayesOneCategory.all
    return categories.map { |category| category.name }.sort.uniq
  end

  # ある特徴が、あるカテゴリに現れる確率
  def fprob(feature, category)
    count = self.catcount(category)
    return 0.0 if count == 0
    return self.fcount(feature, category).to_f / count.to_f
  end

  def weightedprob(feature, category, weight = 1.0, ap = 0.5)
    basicprob = self.fprob(feature, category)
    totals    = self.categories.
      map { |cat| self.fcount(feature, cat) }.
      inject { |ret, val| ret + val }.to_f
    return ((weight * ap) + (totals * basicprob)) / (weight + totals)
  end

  def docprob(features, category)
    return features.inject(1.0) { |prob, feature|
      prob * self.weightedprob(feature, category)
    }
  end

  def prob(features, category)
    catprob = self.catcount(category).to_f / self.totalcount.to_f
    docprob = self.docprob(features, category)
    return docprob * catprob
  end

  def classify(features)
    return self.categories.inject({}) { |memo, category|
      memo[category] = self.prob(features, category)
      memo
    }
  end
end

classifier = BayesOneClassifier.new
%>

<div><%#=h classifier.fcount("jr", "鉄道").inspect %></div>
<div><%#=h classifier.catcount("鉄道").inspect %></div>
<div><%#=h classifier.totalcount.inspect %></div>
<div><%#=h classifier.categories.join(",") %></div>
<div><%#=h classifier.weightedprob("jr", "鉄道").inspect %></div>
<div><%#=h classifier.weightedprob("経済", "鉄道").inspect %></div>
<div><%=h classifier.classify(["経済", "政治"]).to_a.join(" ") %></div>
<div><%=h classifier.classify(["jr", "鉄道"]).to_a.join(" ") %></div>
